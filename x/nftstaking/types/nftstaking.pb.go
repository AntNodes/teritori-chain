// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teritori/nftstaking/v1beta1/nftstaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftType int32

const (
	NftType_NftTypeDefault NftType = 0
)

var NftType_name = map[int32]string{
	0: "NFT_TYPE_DEFAULT",
}

var NftType_value = map[string]int32{
	"NFT_TYPE_DEFAULT": 0,
}

func (x NftType) String() string {
	return proto.EnumName(NftType_name, int32(x))
}

func (NftType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4f464c8317ea07c, []int{0}
}

type Permission int32

const (
	Permission_PermSetServerAccess Permission = 0
)

var Permission_name = map[int32]string{
	0: "SET_SERVER_ACCESS",
}

var Permission_value = map[string]int32{
	"SET_SERVER_ACCESS": 0,
}

func (x Permission) String() string {
	return proto.EnumName(Permission_name, int32(x))
}

func (Permission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4f464c8317ea07c, []int{1}
}

type NftStaking struct {
	NftType       NftType `protobuf:"varint,1,opt,name=nft_type,json=nftType,proto3,enum=teritori.nftstaking.v1beta1.NftType" json:"nft_type,omitempty"`
	NftIdentifier string  `protobuf:"bytes,2,opt,name=nft_identifier,json=nftIdentifier,proto3" json:"nft_identifier,omitempty"`
	NftMetadata   string  `protobuf:"bytes,3,opt,name=nft_metadata,json=nftMetadata,proto3" json:"nft_metadata,omitempty"`
	RewardAddress string  `protobuf:"bytes,4,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	RewardWeight  uint64  `protobuf:"varint,5,opt,name=reward_weight,json=rewardWeight,proto3" json:"reward_weight,omitempty"`
}

func (m *NftStaking) Reset()         { *m = NftStaking{} }
func (m *NftStaking) String() string { return proto.CompactTextString(m) }
func (*NftStaking) ProtoMessage()    {}
func (*NftStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f464c8317ea07c, []int{0}
}
func (m *NftStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftStaking.Merge(m, src)
}
func (m *NftStaking) XXX_Size() int {
	return m.Size()
}
func (m *NftStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_NftStaking.DiscardUnknown(m)
}

var xxx_messageInfo_NftStaking proto.InternalMessageInfo

func (m *NftStaking) GetNftType() NftType {
	if m != nil {
		return m.NftType
	}
	return NftType_NftTypeDefault
}

func (m *NftStaking) GetNftIdentifier() string {
	if m != nil {
		return m.NftIdentifier
	}
	return ""
}

func (m *NftStaking) GetNftMetadata() string {
	if m != nil {
		return m.NftMetadata
	}
	return ""
}

func (m *NftStaking) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func (m *NftStaking) GetRewardWeight() uint64 {
	if m != nil {
		return m.RewardWeight
	}
	return 0
}

type NftTypePerms struct {
	NftType NftType      `protobuf:"varint,1,opt,name=nft_type,json=nftType,proto3,enum=teritori.nftstaking.v1beta1.NftType" json:"nft_type,omitempty"`
	Perms   []Permission `protobuf:"varint,2,rep,packed,name=perms,proto3,enum=teritori.nftstaking.v1beta1.Permission" json:"perms,omitempty"`
}

func (m *NftTypePerms) Reset()         { *m = NftTypePerms{} }
func (m *NftTypePerms) String() string { return proto.CompactTextString(m) }
func (*NftTypePerms) ProtoMessage()    {}
func (*NftTypePerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4f464c8317ea07c, []int{1}
}
func (m *NftTypePerms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftTypePerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftTypePerms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftTypePerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftTypePerms.Merge(m, src)
}
func (m *NftTypePerms) XXX_Size() int {
	return m.Size()
}
func (m *NftTypePerms) XXX_DiscardUnknown() {
	xxx_messageInfo_NftTypePerms.DiscardUnknown(m)
}

var xxx_messageInfo_NftTypePerms proto.InternalMessageInfo

func (m *NftTypePerms) GetNftType() NftType {
	if m != nil {
		return m.NftType
	}
	return NftType_NftTypeDefault
}

func (m *NftTypePerms) GetPerms() []Permission {
	if m != nil {
		return m.Perms
	}
	return nil
}

func init() {
	proto.RegisterEnum("teritori.nftstaking.v1beta1.NftType", NftType_name, NftType_value)
	proto.RegisterEnum("teritori.nftstaking.v1beta1.Permission", Permission_name, Permission_value)
	proto.RegisterType((*NftStaking)(nil), "teritori.nftstaking.v1beta1.NftStaking")
	proto.RegisterType((*NftTypePerms)(nil), "teritori.nftstaking.v1beta1.NftTypePerms")
}

func init() {
	proto.RegisterFile("teritori/nftstaking/v1beta1/nftstaking.proto", fileDescriptor_d4f464c8317ea07c)
}

var fileDescriptor_d4f464c8317ea07c = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbd, 0xfd, 0xa0, 0xb0, 0x84, 0x28, 0x18, 0x24, 0xac, 0x20, 0x59, 0xa6, 0x80, 0xb0,
	0x2a, 0xb0, 0xd5, 0xe6, 0x0a, 0x42, 0xa1, 0x75, 0x25, 0x24, 0x1a, 0x22, 0xdb, 0x7c, 0x5e, 0xac,
	0x4d, 0x3c, 0x76, 0x56, 0x90, 0x75, 0xb4, 0x3b, 0x6d, 0xe9, 0x2b, 0xf4, 0x80, 0x78, 0x81, 0xbe,
	0x0f, 0xc7, 0x1e, 0x39, 0xa2, 0xe4, 0x45, 0xd0, 0x7a, 0x5d, 0xc8, 0x29, 0x17, 0x6e, 0xa3, 0xdf,
	0xfe, 0xe6, 0xbf, 0x3b, 0xab, 0xa1, 0x4f, 0x11, 0x24, 0xc7, 0x4a, 0xf2, 0x50, 0x14, 0xa8, 0x90,
	0x7d, 0xe1, 0xa2, 0x0c, 0x4f, 0x76, 0x47, 0x80, 0x6c, 0x77, 0x09, 0x05, 0x33, 0x59, 0x61, 0x65,
	0xdf, 0xbf, 0xb2, 0x83, 0xa5, 0xa3, 0xc6, 0xee, 0xde, 0x2d, 0xab, 0xb2, 0xaa, 0xbd, 0x50, 0x57,
	0xa6, 0x65, 0x7b, 0x41, 0x28, 0x1d, 0x14, 0x98, 0x18, 0xd9, 0x7e, 0x49, 0xaf, 0x8b, 0x02, 0x33,
	0x3c, 0x9b, 0x81, 0x43, 0x3c, 0xe2, 0xb7, 0xf7, 0x1e, 0x05, 0x2b, 0x42, 0x83, 0x41, 0x81, 0xe9,
	0xd9, 0x0c, 0xe2, 0x2d, 0x61, 0x0a, 0xfb, 0x31, 0x6d, 0xeb, 0x00, 0x9e, 0x83, 0x40, 0x5e, 0x70,
	0x90, 0xce, 0x9a, 0x47, 0xfc, 0x1b, 0xf1, 0x2d, 0x51, 0xe0, 0xeb, 0xbf, 0xd0, 0x7e, 0x40, 0x5b,
	0x5a, 0x9b, 0x02, 0xb2, 0x9c, 0x21, 0x73, 0xd6, 0x6b, 0xe9, 0xa6, 0x28, 0xf0, 0xa8, 0x41, 0x3a,
	0x49, 0xc2, 0x29, 0x93, 0x79, 0xc6, 0xf2, 0x5c, 0x82, 0x52, 0xce, 0x86, 0x49, 0x32, 0xb4, 0x6f,
	0xa0, 0xfd, 0x90, 0x36, 0x20, 0x3b, 0x05, 0x5e, 0x4e, 0xd0, 0xd9, 0xf4, 0x88, 0xbf, 0x11, 0xb7,
	0x0c, 0xfc, 0x50, 0xb3, 0xed, 0xef, 0x84, 0xb6, 0x9a, 0xa7, 0x0e, 0x41, 0x4e, 0xd5, 0xff, 0xcf,
	0xf9, 0x82, 0x6e, 0xce, 0x74, 0x92, 0xb3, 0xe6, 0xad, 0xfb, 0xed, 0xbd, 0x27, 0x2b, 0xbb, 0xf5,
	0x9d, 0x5c, 0x29, 0x5e, 0x89, 0xd8, 0x74, 0xed, 0xf4, 0xe8, 0x56, 0x13, 0x69, 0xfb, 0xb4, 0x33,
	0x38, 0x4c, 0xb3, 0xf4, 0xd3, 0x30, 0xca, 0x0e, 0xa2, 0xc3, 0xfe, 0xbb, 0x37, 0x69, 0xc7, 0xea,
	0xda, 0xe7, 0x17, 0x5e, 0xbb, 0x51, 0x0e, 0xa0, 0x60, 0xc7, 0x5f, 0x71, 0xe7, 0x39, 0xa5, 0xff,
	0x92, 0xec, 0x80, 0xde, 0x4e, 0xa2, 0x34, 0x4b, 0xa2, 0xf8, 0x7d, 0x14, 0x67, 0xfd, 0xfd, 0xfd,
	0x28, 0x49, 0x3a, 0x56, 0xf7, 0xde, 0xf9, 0x85, 0x77, 0x47, 0x6b, 0x09, 0x60, 0x02, 0xf2, 0x04,
	0x64, 0x7f, 0x3c, 0x06, 0xa5, 0x5e, 0x1d, 0xfd, 0x9c, 0xbb, 0xe4, 0x72, 0xee, 0x92, 0xdf, 0x73,
	0x97, 0xfc, 0x58, 0xb8, 0xd6, 0xe5, 0xc2, 0xb5, 0x7e, 0x2d, 0x5c, 0xeb, 0x73, 0xaf, 0xe4, 0x38,
	0x39, 0x1e, 0x05, 0xe3, 0x6a, 0x1a, 0x0e, 0x3e, 0xa6, 0xc3, 0xb7, 0xc3, 0xf0, 0x6a, 0x9a, 0x67,
	0xe3, 0x09, 0xe3, 0x22, 0xfc, 0xb6, 0xbc, 0x7e, 0xfa, 0xd3, 0xd4, 0xe8, 0x5a, 0xbd, 0x3f, 0xbd,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x0d, 0x16, 0x22, 0xa2, 0x02, 0x00, 0x00,
}

func (m *NftStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardWeight != 0 {
		i = encodeVarintNftstaking(dAtA, i, uint64(m.RewardWeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintNftstaking(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NftMetadata) > 0 {
		i -= len(m.NftMetadata)
		copy(dAtA[i:], m.NftMetadata)
		i = encodeVarintNftstaking(dAtA, i, uint64(len(m.NftMetadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftIdentifier) > 0 {
		i -= len(m.NftIdentifier)
		copy(dAtA[i:], m.NftIdentifier)
		i = encodeVarintNftstaking(dAtA, i, uint64(len(m.NftIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.NftType != 0 {
		i = encodeVarintNftstaking(dAtA, i, uint64(m.NftType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NftTypePerms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftTypePerms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftTypePerms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Perms) > 0 {
		dAtA2 := make([]byte, len(m.Perms)*10)
		var j1 int
		for _, num := range m.Perms {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintNftstaking(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.NftType != 0 {
		i = encodeVarintNftstaking(dAtA, i, uint64(m.NftType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftType != 0 {
		n += 1 + sovNftstaking(uint64(m.NftType))
	}
	l = len(m.NftIdentifier)
	if l > 0 {
		n += 1 + l + sovNftstaking(uint64(l))
	}
	l = len(m.NftMetadata)
	if l > 0 {
		n += 1 + l + sovNftstaking(uint64(l))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovNftstaking(uint64(l))
	}
	if m.RewardWeight != 0 {
		n += 1 + sovNftstaking(uint64(m.RewardWeight))
	}
	return n
}

func (m *NftTypePerms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftType != 0 {
		n += 1 + sovNftstaking(uint64(m.NftType))
	}
	if len(m.Perms) > 0 {
		l = 0
		for _, e := range m.Perms {
			l += sovNftstaking(uint64(e))
		}
		n += 1 + sovNftstaking(uint64(l)) + l
	}
	return n
}

func sovNftstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftstaking(x uint64) (n int) {
	return sovNftstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftType", wireType)
			}
			m.NftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftType |= NftType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWeight", wireType)
			}
			m.RewardWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftTypePerms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftTypePerms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftTypePerms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftType", wireType)
			}
			m.NftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftType |= NftType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Permission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNftstaking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Permission(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Perms = append(m.Perms, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNftstaking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNftstaking
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNftstaking
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Perms) == 0 {
					m.Perms = make([]Permission, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Permission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNftstaking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Permission(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Perms = append(m.Perms, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNftstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftstaking = fmt.Errorf("proto: unexpected end of group")
)
